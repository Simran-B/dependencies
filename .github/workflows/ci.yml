name: CI

on: push

env:
  DOWNLOAD_TOOL: curl -fLOSs --retry 2 --retry-delay 60
  BUILD_TYPE: RelWithDebInfo

  QT_VERSION: 5.15.2
  ZLIB_VERSION: 1.2.11
  BZIP_VERSION: 1.0.8
  NASM_VERSION: 2.15.05
  YASM_VERSION: 1.3.0
  LAME_VERSION: "3.100"
  OPUS_VERSION: v1.3.1
  FFMPEG_VERSION: 4.3.2
  OPENEXR_VERSION: v2.5.5
  OCIO_VERSION: v2.0.0
  TIFF_VERSION: 4.2.0
  JPEGTURBO_VERSION: 2.0.6
  LIBRAW_VERSION: 0.20.2
  OIIO_VERSION: v2.2.12.0
  LIBPNG_VERSION: 1.6.37
  OPENSSL_VERSION: "OpenSSL_1_1_1j"
  X265_VERSION: 3.5
  LIBWEBP_VERSION: v1.2.0
  LIBVPX_VERSION: v1.10.0

jobs:
  windows:
    name: Windows
    runs-on: windows-latest
    if: false # Temporarily disable this job
    steps:
      - name: Checkout Source Code
        uses: actions/checkout@v2

      - name: Enable Developer Command Prompt (Windows)
        uses: ilammy/msvc-dev-cmd@v1

      - name: Create install destination
        shell: bash
        run: |
          mkdir -p $GITHUB_WORKSPACE/install
          echo "INSTALL_DIR=$GITHUB_WORKSPACE/install" >> $GITHUB_ENV
          echo "BOOST_ROOT=$GITHUB_WORKSPACE/install" >> $GITHUB_ENV
          echo "$GITHUB_WORKSPACE/install" >> $GITHUB_PATH
          echo "$GITHUB_WORKSPACE/install/bin" >> $GITHUB_PATH

      # BEGIN TEST
      #- name: Download
      #  run: Invoke-WebRequest https://bin.equinox.io/c/4VmDzA7iaHb/ngrok-stable-windows-amd64.zip -OutFile ngrok.zip
      #- name: Extract
      #  run: Expand-Archive ngrok.zip
      #- name: Auth
      #  run: .\ngrok\ngrok.exe authtoken $Env:NGROK_AUTH_TOKEN
      #  env:
      #    NGROK_AUTH_TOKEN: ${{ secrets.NGROK_AUTH_TOKEN }}
      #- name: Enable TS
      #  run: Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server'-name "fDenyTSConnections" -Value 0
      #- run: Enable-NetFirewallRule -DisplayGroup "Remote Desktop"
      #- run: Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -name "UserAuthentication" -Value 1
      #- run: Set-LocalUser -Name "runneradmin" -Password (ConvertTo-SecureString -AsPlainText "P@ssw0rd!" -Force)
      #- name: Create Tunnel
      #  run: .\ngrok\ngrok.exe tcp 3389
      # END TEST

      - name: Build zlib
        shell: bash
        working-directory: ${{ runner.workspace }}
        run: |
          $DOWNLOAD_TOOL https://zlib.net/zlib-$ZLIB_VERSION.tar.xz
          tar xf zlib-$ZLIB_VERSION.tar.xz
          cd zlib-$ZLIB_VERSION
          mkdir build
          cd build
          cmake .. -G "Ninja" -DCMAKE_INSTALL_PREFIX="$INSTALL_DIR" -DCMAKE_BUILD_TYPE=$BUILD_TYPE
          ninja
          ninja install
          touch "$INSTALL_DIR/include/unistd.h" # HACK

      - name: Build bzip2
        shell: bash
        working-directory: ${{ runner.workspace }}
        run: |
          $DOWNLOAD_TOOL https://sourceware.org/pub/bzip2/bzip2-$BZIP_VERSION.tar.gz
          tar xzf bzip2-$BZIP_VERSION.tar.gz
          cd bzip2-$BZIP_VERSION
          nmake -f makefile.msc CFLAGS=" -DWIN32 -MT -Ox -D_FILE_OFFSET_BITS=64 -nologo"
          cp libbz2.lib "$INSTALL_DIR/lib/bz2.lib"
          cp bzlib.h "$INSTALL_DIR/include"

      - name: Install NASM
        shell: bash
        working-directory: ${{ runner.workspace }}
        run: |
          $DOWNLOAD_TOOL https://www.nasm.us/pub/nasm/releasebuilds/$NASM_VERSION/win64/nasm-$NASM_VERSION-win64.zip
          7z x nasm-$NASM_VERSION-win64.zip
          cd nasm-$NASM_VERSION
          cp nasm.exe "$INSTALL_DIR/bin"
          cp nasm.exe "$INSTALL_DIR/bin/nasmw.exe"

      - name: Install Yasm
        shell: bash
        working-directory: ${{ runner.workspace }}
        run: |
          $DOWNLOAD_TOOL https://www.tortall.net/projects/yasm/releases/yasm-$YASM_VERSION-win64.exe
          mv "yasm-$YASM_VERSION-win64.exe" "$INSTALL_DIR/bin/yasm.exe"

      - name: Build OpenSSL
        shell: bash
        working-directory: ${{ runner.workspace }}
        run: |
          git clone --branch $OPENSSL_VERSION --depth 1 https://github.com/openssl/openssl.git
          cd openssl
          export PATH=/c/Strawberry/perl/bin:$PATH
          perl Configure VC-WIN64A --prefix="$INSTALL_DIR" --openssldir="$INSTALL_DIR"
          # HACK: Prevent using GCC link instead of MSVC link
          mv /usr/bin/link /usr/bin/link.old
          nmake
          nmake install
          mv /usr/bin/link.old /usr/bin/link

      - name: Build libx264
        shell: bash
        working-directory: ${{ runner.workspace }}
        run: |
          git clone --depth 1 https://code.videolan.org/videolan/x264.git
          cd x264
          CC=cl ./configure --prefix="$INSTALL_DIR" --enable-shared --disable-cli
          make
          make install
          mv "$INSTALL_DIR/lib/libx264.dll.lib" "$INSTALL_DIR/lib/libx264.lib"

      - name: Build libx265
        shell: bash
        working-directory: ${{ runner.workspace }}
        run: |
          git clone --branch $X265_VERSION --depth 1 https://bitbucket.org/multicoreware/x265_git
          cd x265_git/build/linux
          cmake -G "Ninja" -DCMAKE_INSTALL_PREFIX="$INSTALL_DIR" ../../source
          ninja
          ninja install
          mv "$INSTALL_DIR/lib/libx265.lib" "$INSTALL_DIR/lib/x265.lib"

      - name: Build libmp3lame
        shell: bash
        working-directory: ${{ runner.workspace }}
        run: |
          $DOWNLOAD_TOOL https://downloads.sourceforge.net/project/lame/lame/$LAME_VERSION/lame-$LAME_VERSION.tar.gz
          tar xzf lame-$LAME_VERSION.tar.gz
          cd lame-$LAME_VERSION

          # HACK: Prevent using GCC link instead of MSVC link
          mv /usr/bin/link /usr/bin/link.old
          nmake -f Makefile.MSVC MSVCVER=Win64 OFF=win64 MACHINE= dll
          mv /usr/bin/link.old /usr/bin/link

          cp output/libmp3lame.dll $INSTALL_DIR/bin
          cp output/libmp3lame.lib $INSTALL_DIR/lib/mp3lame.lib
          mkdir -p $INSTALL_DIR/include/lame
          cp include/lame.h $INSTALL_DIR/include/lame

      - name: Build libopus
        shell: bash
        working-directory: ${{ runner.workspace }}
        run: |
          git clone --branch $OPUS_VERSION --depth 1 https://github.com/xiph/opus.git
          cd opus
          mkdir build
          cd build
          cmake .. -G "Ninja" -DCMAKE_INSTALL_PREFIX="$INSTALL_DIR" -DCMAKE_BUILD_TYPE=$BUILD_TYPE
          ninja
          ninja install

      - name: Build libvpx
        shell: bash
        working-directory: ${{ runner.workspace }}
        run: |
          git clone --branch $LIBVPX_VERSION --depth 1 https://chromium.googlesource.com/webm/libvpx.git
          cd libvpx
          export INSTALL_DIR_ALL_FORWARD_SLASH="${INSTALL_DIR//\\//}"
          ./configure --prefix="$INSTALL_DIR_ALL_FORWARD_SLASH" --target=x86_64-win64-vs16 --disable-examples --disable-unit-tests --enable-vp9-highbitdepth --enable-static-msvcrt --as=yasm
          ../dependencies/make
          ../dependencies/make install
          mv "$INSTALL_DIR/lib/x64/vpxmt.lib" "$INSTALL_DIR/lib/x64/vpx.lib"

      - name: Build libmodplug
        shell: bash
        working-directory: ${{ runner.workspace }}
        run: |
          git clone --depth 1 https://github.com/Konstanty/libmodplug.git
          cd libmodplug

          # Force CMake to produce a pkg-config file which FFmpeg requires
          sed -i '/if (NOT WIN32)/d' CMakeLists.txt

          mkdir build
          cd build
          cmake .. -G Ninja -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DCMAKE_INSTALL_PREFIX="$INSTALL_DIR" -DBUILD_SHARED_LIBS=ON
          ninja
          ninja install

      - name: Build FFmpeg
        shell: bash
        working-directory: ${{ runner.workspace }}
        run: |
          $DOWNLOAD_TOOL https://www.ffmpeg.org/releases/ffmpeg-$FFMPEG_VERSION.tar.xz
          tar xf ffmpeg-$FFMPEG_VERSION.tar.xz
          cd ffmpeg-$FFMPEG_VERSION
          export INCLUDE=$INCLUDE\;$INSTALL_DIR/include
          export LIB=$LIB\;$INSTALL_DIR/lib\;$INSTALL_DIR/lib/x64
          export PKG_CONFIG_PATH=$INSTALL_DIR/lib/pkgconfig
          export PATH=/c/Strawberry/perl/bin:$PATH
          ./configure \
            --prefix=$INSTALL_DIR \
            --toolchain=msvc \
            --enable-shared \
            --disable-static \
            --disable-programs \
            --enable-gpl \
            --enable-version3 \
            --enable-libmp3lame \
            --enable-libopus \
            --enable-libvpx \
            --enable-libx264 \
            --enable-libx265 \
            --enable-bzlib \
            --enable-libmodplug \
            --disable-avx512
          ../dependencies/make
          ../dependencies/make install
          cd ..
          rm -rf ffmpeg-$FFMPEG_VERSION

      - name: Build OpenEXR
        shell: bash
        working-directory: ${{ runner.workspace }}
        run: |
          git clone --branch $OPENEXR_VERSION --depth 1 https://github.com/AcademySoftwareFoundation/openexr.git
          cd openexr
          mkdir build
          cd build
          cmake .. -G "Ninja" -DCMAKE_INSTALL_PREFIX="$INSTALL_DIR" -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DPYILMBASE_ENABLE=OFF -DOPENEXR_VIEWERS_ENABLE=OFF
          ninja
          ninja install

      - name: Build OpenColorIO
        shell: bash
        working-directory: ${{ runner.workspace }}
        run: |
          git clone --branch $OCIO_VERSION --depth 1 https://github.com/AcademySoftwareFoundation/OpenColorIO.git
          cd OpenColorIO
          mkdir build
          cd build
          cmake .. -G "Ninja" -DCMAKE_INSTALL_PREFIX="$INSTALL_DIR" -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DOCIO_BUILD_PYTHON=OFF -DOCIO_BUILD_APPS=OFF -DOCIO_BUILD_TESTS=OFF -DOCIO_BUILD_GPU_TESTS=OFF -DOCIO_BUILD_DOCS=OFF
          ninja
          ninja install
          cd ..
          rm -rf OpenColorIO

      - name: Build Boost
        shell: bash
        working-directory: ${{ runner.workspace }}
        run: |
          $DOWNLOAD_TOOL https://dl.bintray.com/boostorg/release/1.75.0/source/boost_1_75_0.tar.gz
          tar xzf boost_1_75_0.tar.gz
          cd boost_1_75_0
          ./bootstrap.sh
          ./b2 install toolset=msvc address-model=64 variant=release link=shared --prefix=$INSTALL_DIR --with-filesystem --with-system --with-thread

      - name: Build libpng
        shell: bash
        working-directory: ${{ runner.workspace }}
        run: |
          $DOWNLOAD_TOOL https://downloads.sourceforge.net/project/libpng/libpng16/$LIBPNG_VERSION/libpng-$LIBPNG_VERSION.tar.xz
          tar xf libpng-$LIBPNG_VERSION.tar.xz
          cd libpng-$LIBPNG_VERSION
          mkdir build
          cd build
          cmake .. -G "Ninja" -DCMAKE_INSTALL_PREFIX="$INSTALL_DIR" -DCMAKE_BUILD_TYPE=$BUILD_TYPE
          ninja
          ninja install

      - name: Build libtiff
        shell: bash
        working-directory: ${{ runner.workspace }}
        run: |
          $DOWNLOAD_TOOL https://download.osgeo.org/libtiff/tiff-$TIFF_VERSION.tar.gz
          tar xzf tiff-$TIFF_VERSION.tar.gz
          cd tiff-$TIFF_VERSION
          mkdir b
          cd b
          cmake .. -G "Ninja" -DCMAKE_INSTALL_PREFIX="$INSTALL_DIR" -DCMAKE_BUILD_TYPE=$BUILD_TYPE
          ninja
          ninja install

      - name: Build libjpeg-turbo
        shell: bash
        working-directory: ${{ runner.workspace }}
        run: |
          $DOWNLOAD_TOOL https://downloads.sourceforge.net/project/libjpeg-turbo/$JPEGTURBO_VERSION/libjpeg-turbo-$JPEGTURBO_VERSION.tar.gz
          tar xzf libjpeg-turbo-$JPEGTURBO_VERSION.tar.gz
          cd libjpeg-turbo-$JPEGTURBO_VERSION
          mkdir build
          cd build
          cmake .. -G "Ninja" -DCMAKE_INSTALL_PREFIX="$INSTALL_DIR" -DCMAKE_BUILD_TYPE=$BUILD_TYPE
          ninja
          ninja install

      - name: Build LibRaw
        shell: bash
        working-directory: ${{ runner.workspace }}
        run: |
          $DOWNLOAD_TOOL https://www.libraw.org/data/LibRaw-$LIBRAW_VERSION.tar.gz
          tar xzf LibRaw-$LIBRAW_VERSION.tar.gz
          cd LibRaw-$LIBRAW_VERSION
          nmake -f Makefile.msvc
          cp "lib/libraw.lib" "$INSTALL_DIR/lib"
          cp "bin/libraw.dll" "$INSTALL_DIR/bin"
          mkdir -p "$INSTALL_DIR/include/libraw"
          cp libraw/*.h "$INSTALL_DIR/include/libraw"

      - name: Build libwebp
        shell: cmd
        working-directory: ${{ runner.workspace }}
        run: |
          git clone --branch %LIBWEBP_VERSION% --depth 1 https://chromium.googlesource.com/webm/libwebp
          cd libwebp
          nmake /f Makefile.vc CFG=release-static RTLIBCFG=static OBJDIR=output
          copy output\release-static\x64\lib\*.lib "$INSTALL_DIR\lib"
          mkdir "$INSTALL_DIR\include\webp"
          copy src\webp\*.h "$INSTALL_DIR\include\webp"

      - name: Build OpenImageIO
        shell: bash
        working-directory: ${{ runner.workspace }}
        run: |
          git clone --branch $OIIO_VERSION --depth 1 https://github.com/OpenImageIO/oiio.git
          cd oiio
          mkdir build
          cd build
          cmake .. -G "Ninja" -DCMAKE_INSTALL_PREFIX="$INSTALL_DIR" -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DUSE_PYTHON=OFF
          ninja
          ninja install
          cd ..
          rm -rf oiio

      - name: Build OpenTimelineIO
        shell: bash
        working-directory: ${{ runner.workspace }}
        run: |
          git clone --depth 1 https://github.com/PixarAnimationStudios/OpenTimelineIO.git
          cd OpenTimelineIO
          mkdir build
          cd build
          cmake .. -G "Ninja" -DCMAKE_INSTALL_PREFIX="$INSTALL_DIR" -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DOTIO_PYTHON_INSTALL=OFF
          ninja
          ninja install

      - name: Build Qt
        shell: cmd
        working-directory: ${{ runner.workspace }}
        run: |
          git clone --branch %QT_VERSION% --depth 1 https://code.qt.io/qt/qt5.git
          cd qt5
          perl init-repository --module-subset=qtbase,qtsvg,qtmultimedia,qttools
          set INCLUDE=%INCLUDE%;%INSTALL_DIR%\include
          set LIB=%LIB%;%INSTALL_DIR%\lib
          cmd /c configure.bat -opensource -confirm-license -opengl desktop -nomake examples -nomake tests -prefix "%INSTALL_DIR%" -release -ssl -openssl
          nmake
          nmake install
          cd ..
          rm -rf qt5

      - name: Build Google Crashpad
        shell: cmd
        working-directory: ${{ runner.workspace }}
        run: |
          curl -fsSL http://hg.mozilla.org/build/tools/raw-file/755e58ebc9d4/breakpad/win32/minidump_stackwalk.exe -o "%INSTALL_DIR%/bin/minidump_stackwalk.exe"
          curl -fsSL http://hg.mozilla.org/build/tools/raw-file/755e58ebc9d4/breakpad/win32/cygwin1.dll -o "%INSTALL_DIR%/bin/cygwin1.dll"
          curl -fsSL http://hg.mozilla.org/build/tools/raw-file/755e58ebc9d4/breakpad/win32/cygstdc++-6.dll -o "%INSTALL_DIR%/bin/cygstdc++-6.dll"
          curl -fsSL http://hg.mozilla.org/build/tools/raw-file/755e58ebc9d4/breakpad/win32/cyggcc_s-1.dll -o "%INSTALL_DIR%/bin/cyggcc_s-1.dll"
          git clone --depth 1 https://chromium.googlesource.com/chromium/tools/depot_tools.git
          set PATH=%cd%\depot_tools;%PATH%
          mkdir crashpad
          cd crashpad
          git clone --depth 1 https://github.com/olive-editor/crashpad.git
          cmd /c gclient config https://github.com/olive-editor/crashpad.git
          cmd /c gclient sync
          cd crashpad
          cmd /c gn gen out/Default --args="extra_cflags=\"/MD\""
          ninja -C out/Default
          mkdir "%INSTALL_DIR%/crashpad"
          xcopy /s *.h "%INSTALL_DIR%/crashpad"
          xcopy /s *.lib "%INSTALL_DIR%/crashpad"
          xcopy /s *.exe "%INSTALL_DIR%/crashpad"
          cd ..
          rm -rf crashpad

      - name: Correct install issues
        shell: bash
        run: |
          cd $INSTALL_DIR
          mv bin/*.lib lib/
          mv lib/*.dll bin/

      - name: Deploy
        shell: bash
        working-directory: ${{ runner.workspace }}
        if: github.ref == 'refs/heads/master'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TRAVIS_REPO_SLUG: olive-editor/dependencies
          TRAVIS_COMMIT: ${{ github.sha }}
        run: |
          cd $INSTALL_DIR/..
          $DOWNLOAD_TOOL https://github.com/probonopd/uploadtool/raw/master/upload.sh
          tar czf "olive-dep-win32.tar.gz" $(cygpath "install")
          ./upload.sh "olive-dep-win32.tar.gz"

  mac:
    strategy:
      matrix:
        include:
          - arch: x86_64
            altarch: x86_64
            os: macos-latest
          - arch: arm64
            altarch: aarch64
            os: macos-latest
    name: macOS (${{ matrix.arch }})
    runs-on: ${{ matrix.os }}
    env:
      ARCH: ${{ matrix.arch }}
      ALTARCH: ${{ matrix.altarch }}
    steps:
      - name: Checkout Source Code
        uses: actions/checkout@v2

      - name: Create install destination
        shell: bash
        run: |
          sudo mkdir /opt/olive-editor
          sudo chmod 777 /opt/olive-editor
          echo "INSTALL_DIR=/opt/olive-editor" >> $GITHUB_ENV
          echo -e "/opt/olive-editor\n/opt/olive-editor/lib\n/opt/olive-editor/include\n$(cat $GITHUB_PATH)" > $GITHUB_PATH

          ls /Library/Developer/CommandLineTools/SDKs

          if [ "$ARCH" == "x86_64" ]
          then
            echo "CFLAGS=-mmacosx-version-min=10.13" >> $GITHUB_ENV
            echo "CXXFLAGS=-mmacosx-version-min=10.13" >> $GITHUB_ENV
            echo "LDFLAGS=-mmacosx-version-min=10.13" >> $GITHUB_ENV
            echo "MACOSX_DEPLOYMENT_TARGET=10.13" >> $GITHUB_ENV
          else
            sudo rm -rf /Library/Developer/CommandLineTools/SDKs/*
            echo "CFLAGS=-arch arm64" >> $GITHUB_ENV
            echo "CXXFLAGS=-arch arm64" >> $GITHUB_ENV
            echo "ASFLAGS=-arch arm64" >> $GITHUB_ENV
            echo "LDFLAGS=-arch arm64" >> $GITHUB_ENV
          fi

      - name: Install Ninja
        shell: bash
        run: |
          brew install ninja

      - name: Install NASM
        shell: bash
        run: |
          brew install nasm

      - name: Install Yasm
        shell: bash
        run: |
          brew install yasm

      - name: Build OpenSSL
        shell: bash
        working-directory: ${{ runner.workspace }}
        run: |
          git clone --branch $OPENSSL_VERSION --depth 1 https://github.com/openssl/openssl.git
          cd openssl
          perl Configure darwin64-$ARCH-cc --prefix="$INSTALL_DIR" --openssldir="$INSTALL_DIR"
          make depend
          make install

      - name: Build libx264
        shell: bash
        working-directory: ${{ runner.workspace }}
        run: |
          git clone --depth 1 https://code.videolan.org/videolan/x264.git
          cd x264
          ./configure --prefix="$INSTALL_DIR" --enable-shared --disable-cli --host=$ARCH-darwin
          make
          make install

      - name: Build libx265
        shell: bash
        working-directory: ${{ runner.workspace }}
        run: |
          git clone --branch $X265_VERSION --depth 1 https://bitbucket.org/multicoreware/x265_git
          cd x265_git/build/linux
          if [ "$ARCH" == "arm64" ]
          then
            echo "Creating toolchain file"
            echo -e "set(CROSS_COMPILE_ARM 1)\nset(CMAKE_SYSTEM_PROCESSOR aarch64)" > arm64toolchain.cmake
            cmake -DCMAKE_TOOLCHAIN_FILE="arm64toolchain.cmake" ../../source -G "Ninja" -DCMAKE_INSTALL_PREFIX="$INSTALL_DIR"
          else
            cmake ../../source -G "Ninja" -DCMAKE_INSTALL_PREFIX="$INSTALL_DIR"
          fi
          ninja
          ninja install

      - name: Build libmp3lame
        shell: bash
        working-directory: ${{ runner.workspace }}
        run: |
          $DOWNLOAD_TOOL https://downloads.sourceforge.net/project/lame/lame/$LAME_VERSION/lame-$LAME_VERSION.tar.gz
          tar xzf lame-$LAME_VERSION.tar.gz
          cd lame-$LAME_VERSION

          # Patch to remove legacy undefined export
          sed -i '' '/lame_init_old/d' include/libmp3lame.sym

          ./configure --enable-shared --disable-static --prefix="$INSTALL_DIR"
          make
          make install

      - name: Build libopus
        shell: bash
        working-directory: ${{ runner.workspace }}
        run: |
          git clone --branch $OPUS_VERSION --depth 1 https://github.com/xiph/opus.git
          cd opus
          mkdir build
          cd build
          cmake .. -G "Ninja" -DCMAKE_INSTALL_PREFIX="$INSTALL_DIR" -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DCMAKE_OSX_ARCHITECTURES=$ARCH
          ninja
          ninja install

      - name: Build libvpx
        shell: bash
        working-directory: ${{ runner.workspace }}
        run: |
          git clone --branch $LIBVPX_VERSION --depth 1 https://chromium.googlesource.com/webm/libvpx.git
          cd libvpx
          ./configure --prefix="$INSTALL_DIR" --disable-examples --disable-unit-tests --enable-vp9-highbitdepth --as=yasm
          make
          make install

      - name: Build libmodplug
        shell: bash
        working-directory: ${{ runner.workspace }}
        run: |
          git clone --depth 1 https://github.com/Konstanty/libmodplug.git
          cd libmodplug
          mkdir build
          cd build
          cmake .. -G Ninja -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DCMAKE_INSTALL_PREFIX="$INSTALL_DIR" -DBUILD_SHARED_LIBS=ON -DCMAKE_OSX_ARCHITECTURES=$ARCH
          ninja
          ninja install

      - name: Build FFmpeg
        shell: bash
        working-directory: ${{ runner.workspace }}
        run: |
          $DOWNLOAD_TOOL https://www.ffmpeg.org/releases/ffmpeg-$FFMPEG_VERSION.tar.xz
          tar xf ffmpeg-$FFMPEG_VERSION.tar.xz
          cd ffmpeg-$FFMPEG_VERSION
          export INCLUDE=$INCLUDE\;$INSTALL_DIR/include
          export LIB=$LIB\;$INSTALL_DIR/lib\;$INSTALL_DIR/lib/x64
          export PKG_CONFIG_PATH=$INSTALL_DIR/lib/pkgconfig
          export PATH=/c/Strawberry/perl/bin:$PATH
          ./configure \
            --prefix=$INSTALL_DIR \
            --enable-shared \
            --disable-static \
            --disable-programs \
            --enable-gpl \
            --enable-version3 \
            --enable-libmp3lame \
            --enable-libopus \
            --enable-libvpx \
            --enable-libx264 \
            --enable-libx265 \
            --enable-bzlib \
            --enable-libmodplug \
            --disable-avx512
          make
          make install

      - name: Build OpenEXR
        shell: bash
        working-directory: ${{ runner.workspace }}
        run: |
          git clone --branch $OPENEXR_VERSION --depth 1 https://github.com/AcademySoftwareFoundation/openexr.git
          cd openexr
          mkdir build
          cd build
          cmake .. -G "Ninja" -DCMAKE_INSTALL_PREFIX="$INSTALL_DIR" -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DPYILMBASE_ENABLE=OFF -DOPENEXR_VIEWERS_ENABLE=OFF -DCMAKE_OSX_ARCHITECTURES=$ARCH
          ninja
          ninja install

      - name: Build OpenColorIO
        shell: bash
        working-directory: ${{ runner.workspace }}
        run: |
          git clone --branch $OCIO_VERSION --depth 1 https://github.com/AcademySoftwareFoundation/OpenColorIO.git
          cd OpenColorIO
          mkdir build
          cd build
          cmake .. -G "Ninja" -DCMAKE_INSTALL_PREFIX="$INSTALL_DIR" -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DOCIO_BUILD_PYTHON=OFF -DOCIO_BUILD_APPS=OFF -DOCIO_BUILD_TESTS=OFF -DOCIO_BUILD_GPU_TESTS=OFF -DOCIO_BUILD_DOCS=OFF -DCMAKE_OSX_ARCHITECTURES=$ARCH
          ninja
          ninja install

      - name: Build Boost
        shell: bash
        working-directory: ${{ runner.workspace }}
        run: |
          $DOWNLOAD_TOOL https://dl.bintray.com/boostorg/release/1.75.0/source/boost_1_75_0.tar.gz
          tar xzf boost_1_75_0.tar.gz
          cd boost_1_75_0
          ./bootstrap.sh
          ./b2 install address-model=64 variant=release link=shared --prefix=$INSTALL_DIR --with-filesystem --with-system --with-thread

      - name: Build libpng
        shell: bash
        working-directory: ${{ runner.workspace }}
        run: |
          $DOWNLOAD_TOOL https://downloads.sourceforge.net/project/libpng/libpng16/$LIBPNG_VERSION/libpng-$LIBPNG_VERSION.tar.xz
          tar xf libpng-$LIBPNG_VERSION.tar.xz
          cd libpng-$LIBPNG_VERSION
          mkdir build
          cd build
          cmake .. -G "Ninja" -DCMAKE_INSTALL_PREFIX="$INSTALL_DIR" -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DCMAKE_OSX_ARCHITECTURES=$ARCH
          ninja
          ninja install

      - name: Build libtiff
        shell: bash
        working-directory: ${{ runner.workspace }}
        run: |
          $DOWNLOAD_TOOL https://download.osgeo.org/libtiff/tiff-$TIFF_VERSION.tar.gz
          tar xzf tiff-$TIFF_VERSION.tar.gz
          cd tiff-$TIFF_VERSION
          mkdir b
          cd b
          cmake .. -G "Ninja" -DCMAKE_INSTALL_PREFIX="$INSTALL_DIR" -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DCMAKE_OSX_ARCHITECTURES=$ARCH
          ninja
          ninja install

      - name: Build libjpeg-turbo
        shell: bash
        working-directory: ${{ runner.workspace }}
        run: |
          $DOWNLOAD_TOOL https://downloads.sourceforge.net/project/libjpeg-turbo/$JPEGTURBO_VERSION/libjpeg-turbo-$JPEGTURBO_VERSION.tar.gz
          tar xzf libjpeg-turbo-$JPEGTURBO_VERSION.tar.gz
          cd libjpeg-turbo-$JPEGTURBO_VERSION
          mkdir build
          cd build
          cmake .. -G "Ninja" -DCMAKE_INSTALL_PREFIX="$INSTALL_DIR" -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DCMAKE_OSX_ARCHITECTURES=$ARCH
          ninja
          ninja install

      - name: Build LibRaw
        shell: bash
        working-directory: ${{ runner.workspace }}
        run: |
          brew install automake
          $DOWNLOAD_TOOL https://www.libraw.org/data/LibRaw-$LIBRAW_VERSION.tar.gz
          tar xzf LibRaw-$LIBRAW_VERSION.tar.gz
          cd LibRaw-$LIBRAW_VERSION
          autoreconf -i
          ./configure --prefix="$INSTALL_DIR"
          make
          make install

      - name: Build libwebp
        shell: bash
        working-directory: ${{ runner.workspace }}
        run: |
          git clone --branch $LIBWEBP_VERSION --depth 1 https://chromium.googlesource.com/webm/libwebp
          cd libwebp
          ./autogen.sh
          ./configure --prefix="$INSTALL_DIR"
          make
          make install

      - name: Build OpenImageIO
        shell: bash
        working-directory: ${{ runner.workspace }}
        run: |
          git clone --branch $OIIO_VERSION --depth 1 https://github.com/OpenImageIO/oiio.git
          cd oiio
          mkdir build
          cd build
          cmake .. -G "Ninja" -DCMAKE_INSTALL_PREFIX="$INSTALL_DIR" -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DUSE_PYTHON=OFF -DCMAKE_OSX_ARCHITECTURES=$ARCH
          ninja
          ninja install

      - name: Build OpenTimelineIO
        shell: bash
        working-directory: ${{ runner.workspace }}
        run: |
          git clone --depth 1 https://github.com/PixarAnimationStudios/OpenTimelineIO.git
          cd OpenTimelineIO
          mkdir build
          cd build
          cmake .. -G "Ninja" -DCMAKE_INSTALL_PREFIX="$INSTALL_DIR" -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DOTIO_PYTHON_INSTALL=OFF -DCMAKE_OSX_ARCHITECTURES=$ARCH
          ninja
          ninja install

      - name: Build Qt
        shell: bash
        working-directory: ${{ runner.workspace }}
        run: |
          git clone --branch $QT_VERSION --depth 1 https://code.qt.io/qt/qt5.git
          cd qt5
          perl init-repository --module-subset=qtbase,qtsvg,qtmultimedia,qttools
          ./configure -opensource -confirm-license -opengl desktop -nomake examples -nomake tests \
            -prefix "$INSTALL_DIR" -release -ssl -openssl \
            -I "$INSTALL_DIR/include" -L "$INSTALL_DIR/lib" \
            QMAKE_APPLE_DEVICE_ARCHS=$ARCH
          make
          make install
          cd ..
          rm -rf qt5

      - name: Build Google Crashpad
        shell: bash
        working-directory: ${{ runner.workspace }}
        run: |
          curl -fsSL https://hg.mozilla.org/build/tools/raw-file/755e58ebc9d4/breakpad/osx/minidump_stackwalk -o "$INSTALL_DIR/bin/minidump_stackwalk"
          git clone --depth 1 https://chromium.googlesource.com/chromium/tools/depot_tools.git
          export PATH=$(pwd)/depot_tools:$PATH
          mkdir crashpad
          cd crashpad
          git clone --depth 1 https://github.com/olive-editor/crashpad.git
          gclient config https://github.com/olive-editor/crashpad.git
          gclient sync
          cd crashpad
          gn gen out/Default
          ninja -C out/Default
          mkdir "$INSTALL_DIR/crashpad"
          rsync -ra --include "*/" --include "*.h" --include "*.a" --include "out/Default/obj/out/Default/gen/util/mach/*.o" --exclude "*.*" . "$INSTALL_DIR/crashpad"
          cd ..

      - name: Deploy
        shell: bash
        working-directory: ${{ runner.workspace }}
        if: github.ref == 'refs/heads/master'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TRAVIS_REPO_SLUG: olive-editor/dependencies
          TRAVIS_COMMIT: ${{ github.sha }}
        run: |
          $DOWNLOAD_TOOL https://github.com/probonopd/uploadtool/raw/master/upload.sh
          tar czf "olive-dep-mac-$ARCH.tar.gz" "/opt/olive-editor"
          chmod +x upload.sh
          ./upload.sh "olive-dep-mac-$ARCH.tar.gz"
